<% if (eventData) { %>
    <h1 style="font-size: 300%;" class="Title"><%- eventData.event.eventTitle %></h1>

    <div id="menuAndPanelSpinner">
        <span class="Cubing-Icon <%- eventData.event.iconName %>"></span>
    </div>

    <div class="Menu-And-Panel-Container" id="menuAndPanelContainer" hide="true">
        <div class="Scrambles-Menu-Container">
            <% for (let i = 0; i < eventData.scrambles.length; i++) { %>
                <button class="Scramble-Menu-Item" id="scrMenuItemContainer<%- i %>" canEdit>
                    <p class="Scramble-Menu-Item-Number" id="scrMenuItemNum"><%- (i+1) %>.</p>
                    <p class="Scramble-Menu-Item-Time" id="scrMenuItemTime">-</p>
                </button>
            <% } %>
        </div>
    
        <div class="Compete-Container">
            <!-- <a href="/scrambles"><button class="Back-To-Scrambles-Button">חזור לערבובים</button></a><br/> -->
            <div class="Scrambles-Container" id="scrsContainer">
                <% for (let i = 0; i < eventData.scrambles.length; i++) { %>
                    <div class="Scramble-Pair-Container" id="scrContainer<%- i %>" <% if (i != 0) { %> hidden <% } %> >
                        <p class="Scramble-Text" style="direction: ltr; white-space: pre-wrap;"> <%- eventData.scrambles[i].replaceAll(' ', '  ').trim() %></p>
                        <div class="Scramble-Img" id="scrImg<%- i %>"></div>
                    </div>
                <% } %>
            </div>
    
            <div>
                <div class="Time-Input-Container">
                    <div class="Input-And-Penalty-Container" id="inputAndPenaltyContainer" canEdit>
                        <input type="text" oninput="" id="timeInput" maxlength="12"/>
        
                        <div class="Penalty-Select-Container">
                            <button class="Plus-2-Btn" id="plus2Btn" style="direction: ltr;">+2</button>
                            <button class="DNF-Btn" id="dnfBtn">DNF</button>
                        </div>
                    </div>
        
                    <div class="Preview-And-Submit-Container" id="previewAndSubmitContainer" canEdit>
                        <label class="Time-Preview-Lbl" id="timePreviewLbl">-</label>
                        <button class="Submit-Time-Btn" id="submitTimeBtn">הבא</button>
                    </div>
                </div>
                <div class="Spinner" id="submitSpinner" hidden></div>
            </div>
    
            <script>
                // const scrambles = `< % - eventData.scrambles % >`.split(',');
                // for (let i = 0; i < scrambles.length; i++)
                //     scrambles[i] = scrambles[i].trim();
                const scrambles = [];
                <% for (let i = 0; i < eventData.scrambles.length; i++) { %>
                    scrambles.push(`<%- eventData.scrambles[i] %>`.trim());
                <% } %>
    
                const eventId = `<%- eventData.event.eventId %>`;
                const scrType = `<%- eventData.event.scrType %>`;
            </script>
        </div>
        
        <div class="Scramble-Control-Container">
            <button id="prevScrBtn" class="Prev-Scr-Btn" hidden>הקודם</button>
            <p id="scrNumberTitle" class="Scramble-Number-Title" hidden></p>
            <button id="nextScrBtn" class="Next-Scr-Btn" hidden>הבא</button>
        </div>
    </div>

    <!-- cstimer_module web worker -->
    <script>
        var cstimerWorker = (function() {
            var worker = new Worker('/src/scripts/backend/utils/cstimer_module.js');
    
            var callbacks = {};
            var msgid = 0;
    
            worker.onmessage = function(e) {
                var data = e.data; //data: [msgid, type, ret]
                var callback = callbacks[data[0]];
                delete callbacks[data[0]];
                callback && callback(data[2]);
            }
    
            function callWorkerAsync(type, details) {
                return new Promise(function(type, details, resolve) {
                    ++msgid;
                    callbacks[msgid] = resolve;
                    worker.postMessage([msgid, type, details]);
                }.bind(null, type, details));
            }
    
            return {
                getScrambleTypes: function() {
                    return callWorkerAsync('scrtype');
                },
                getScramble: function() {
                    return callWorkerAsync('scramble', Array.prototype.slice.apply(arguments));
                },
                setSeed: function(seed) {
                    return callWorkerAsync('seed', [seed]);
                },
                setGlobal: function(key, value) {
                    return callWorkerAsync('set', [key, value]);
                },
                getImage: function(scramble, type) {
                    return callWorkerAsync('image', [scramble, type]);
                }
            }
        })();
    </script>
    <script type="module" src="/src/scripts/pages/compete.js"></script>
<% } else { %>
    <div class="Not-Found-Container">
        <h1 class="Title">מקצה לא קיים</h1>
    </div>
<% } %>
